#!/bin/sh

set -e

AZURE_RESOURCE_GROUP_LOCATION=eastus
AZURE_STORAGE_ACCT=twitterstorage$RANDOM
AZURE_ANALYTICS=twitteranalytics$RANDOM
AKS_CLUSTER_NAME=$AKS
AKS_CLUSTER_RG_NAME=$AKS_RG
AZURE_COSMOS_DB=$DATABASE
AZURE_COSMOS_RG=$DATABASE_RG
TWITTER_FILTER_TEXT=$FILTER_TEXT

case $CNAB_ACTION in
    install)

        echo "Running Duffle bundle:" $CNAB_INSTALLATION_NAME

        echo "Log into Azure"
        az login --service-principal -u $AzureClientID -p $AzureClientSecret --tenant $AzureTenantID

        echo "Create resource group: $CNAB_INSTALLATION_NAME"
        az group create --name $CNAB_INSTALLATION_NAME --location $AZURE_RESOURCE_GROUP_LOCATION

        echo "Create storage account: $AZURE_STORAGE_ACCT"
        az storage account create --name $AZURE_STORAGE_ACCT --resource-group $CNAB_INSTALLATION_NAME --sku Standard_LRS

        echo "Create storage queue: $AZURE_STORAGE_ACCT"
        az storage queue create --name $AZURE_STORAGE_ACCT --account-name $AZURE_STORAGE_ACCT

        echo "Create cognitive services account: $AZURE_ANALYTICS"
        az cognitiveservices account create --name $AZURE_ANALYTICS -g $CNAB_INSTALLATION_NAME --kind TextAnalytics --sku S0 --location $AZURE_RESOURCE_GROUP_LOCATION --yes

        if [ ! -z "$(az cosmosdb list --query "[?contains(name, '$AZURE_COSMOS_DB')]" -o tsv)" ]; then
            echo "Cosmos DB found, skipping creation."
        else
            echo "Create Comsmos DB: $AZURE_COSMOS_DB"
            az cosmosdb create --name $AZURE_COSMOS_DB --resource-group $CNAB_INSTALLATION_NAME
        fi

        # Get endpoints and keys
        AZURE_QUEUE_KEY=$(az storage account keys list --account-name $AZURE_STORAGE_ACCT --resource-group $CNAB_INSTALLATION_NAME --query [0].value -o tsv)
        COSMOS_DB_ENDPOINT=$(az cosmosdb show --name $AZURE_COSMOS_DB --resource-group $AZURE_COSMOS_RG --query documentEndpoint -o tsv)
        COSMOS_DB_MASTERKEY=$(az cosmosdb list-keys --name $AZURE_COSMOS_DB --resource-group $AZURE_COSMOS_RG --query primaryMasterKey -o tsv)
        AZURE_ANALYTICS_ENDPOINT=$(az cognitiveservices account show --resource-group $CNAB_INSTALLATION_NAME --name $AZURE_ANALYTICS --query endpoint -o tsv)/sentiment
        AZURE_ANALYTICS_KEY=$(az cognitiveservices account keys list --resource-group $CNAB_INSTALLATION_NAME --name $AZURE_ANALYTICS --query key1 -o tsv)

        # Get AKS credentials
        az aks get-credentials --name $AKS_CLUSTER_NAME --resource-group $AKS_CLUSTER_RG_NAME --admin

        echo "Create Kubernetes secrets"
        kubectl create namespace $CNAB_INSTALLATION_NAME
        kubectl create secret generic $CNAB_INSTALLATION_NAME-tweet-sentiment-storage --from-literal=storageAccountName=$AZURE_STORAGE_ACCT --from-literal=accessKey=$AZURE_QUEUE_KEY --namespace $CNAB_INSTALLATION_NAME
        kubectl create secret generic $CNAB_INSTALLATION_NAME-tweet-sentiment-cosmos --from-literal=uri=$COSMOS_DB_ENDPOINT --from-literal=primaryKey=$COSMOS_DB_MASTERKEY --namespace $CNAB_INSTALLATION_NAME
        kubectl create secret generic $CNAB_INSTALLATION_NAME-tweet-sentiment-analytics --from-literal=textAnalyticsEndpoint=$AZURE_ANALYTICS_ENDPOINT --from-literal=textAnalyticsKey=$AZURE_ANALYTICS_KEY --namespace $CNAB_INSTALLATION_NAME

        echo "Helm install: $CNAB_INSTALLATION_NAME"
        helm init --client-only
        helm repo add azure-samples https://azure-samples.github.io/helm-charts/
        helm install azure-samples/twitter-sentiment-cnab --name $CNAB_INSTALLATION_NAME --namespace $CNAB_INSTALLATION_NAME  \
            --set consumerKey=$(az keyvault secret show --name twitterConsumerKey --vault-name nepeterskv007 --query value -o tsv) \
            --set consumerSecret=$(az keyvault secret show --name twitterConsumerSecret --vault-name nepeterskv007 --query value -o tsv) \
            --set accessToken=$(az keyvault secret show --name twitteraccessToken --vault-name nepeterskv007 --query value -o tsv) \
            --set accessTokenSecret=$(az keyvault secret show --name twitterAccessTokenSecret --vault-name nepeterskv007 --query value -o tsv) \
            --set filterText=$TWITTER_FILTER_TEXT
        ;;
    uninstall)
        echo "Uninstalling Duffle bundle:" $CNAB_INSTALLATION_NAME

        echo "Log into Azure"
        az login --service-principal -u $AzureClientID -p $AzureClientSecret --tenant $AzureTenantID

        echo "Delete resource group: $CNAB_INSTALLATION_NAME"
        az group delete --name $CNAB_INSTALLATION_NAME --yes --no-wait

        # Get AKS credentials
        az aks get-credentials --name $AKS_CLUSTER_NAME --resource-group $AKS_CLUSTER_RG_NAME --admin
        helm init --client-only

        echo "Deleting Helm release: $CNAB_INSTALLATION_NAME"
        helm delete $CNAB_INSTALLATION_NAME --purge

        echo "Deleting Kubernetes namespace $CNAB_INSTALLATION_NAME"
        kubectl delete namespace $CNAB_INSTALLATION_NAME
        ;;
    upgrade)
        echo "Upgrade action"
        ;;
    status)
        echo "Status action"
        ;;
    *)
    echo "No action for $action"
    ;;
esac
echo "Action $action complete for $CNAB_INSTALLATION_NAME"